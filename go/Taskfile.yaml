version: "3"

vars:
  APP_NAME:
    sh: echo "${APP_NAME:-$(basename $(pwd))}"
  APP_VERSION:
    sh: |
      if [ ! -z "${APP_VERSION}" ]; then
        echo ${APP_VERSION}
      else
        echo $(git describe --tags --always)
      fi

tasks:
  run:
    desc: Run the application
    env:
      APP_CONFIG_PATH:
        sh: if [ -f "config.yaml" ]; then echo config.yaml; fi
    cmds:
      - go run -race -tags osusergo,netgo -ldflags="-X 'github.com/ashep/go-apprun.appName={{.APP_NAME}}' -X 'github.com/ashep/go-apprun.appVer={{.APP_VERSION}}'" main.go {{.CLI_ARGS}}

  gen:
    desc: Generate go code
    cmds:
      - go generate -v ./...

  gen-proto:
    desc: Generate protobuf code
    cmds:
      - rm -rvf ./sdk/proto
      - buf lint proto
      - buf generate

  build:
    internal: true
    env:
      GOOS: "{{.OS}}"
      GOARCH: "{{.ARCH}}"
      CGO_ENABLED: "0"
    cmds:
      - mkdir -p build
      - go mod vendor
      - go build -tags osusergo,netgo -ldflags="-extldflags=-static -w -s -X 'github.com/ashep/go-apprun.appName={{.APP_NAME}}' -X 'github.com/ashep/go-apprun.appVer={{.APP_VERSION}}'" -o build/{{.APP_NAME}}-{{.OS}}-{{.ARCH}}-{{.APP_VERSION}}{{.FEXT}} main.go

  build-all:
    desc: Build binaries for all platforms Linux/amd64
    cmds:
      - task: build-linux-amd64
      - task: build-darwin-amd64
      - task: build-darwin-arm64
      - task: build-windows-amd64

  build-linux-amd64:
    desc: Build a binary for Linux/amd64
    cmds:
      - task: build
        vars:
          OS: linux
          ARCH: amd64

  build-darwin-amd64:
    desc: Build a binary for MacOS/amd64
    cmds:
      - task: build
        vars:
          OS: darwin
          ARCH: amd64

  build-darwin-arm64:
    desc: Build a binary for MacOS/arm64
    cmds:
      - task: build
        vars:
          OS: darwin
          ARCH: arm64

  build-windows-amd64:
    desc: Build a binary for Windows/amd64
    cmds:
      - task: build
        vars:
          OS: windows
          ARCH: amd64
          FEXT: .exe

  migrate-up:
    desc: Apply DB migrations
    env:
      APP_CONFIG_PATH:
        sh: '[ -f "config.yaml" ] && echo config.yaml'
    cmds:
      - go run main.go -migrate-up {{.CLI_ARGS}}

  migrate-down:
    desc: Revert DB migrations
    env:
      APP_CONFIG_PATH:
        sh: '[ -f "config.yaml" ] && echo config.yaml'
    cmds:
      - go run main.go -migrate-down {{.CLI_ARGS}}

  vet:
    desc: Run 'go vet'
    cmds:
      - go vet ./...

  staticcheck:
    desc: Run staticcheck
    cmds:
      - if ! which -s staticcheck; then go install honnef.co/go/tools/cmd/staticcheck@latest; fi
      - staticcheck ./...

  golangci-lint:
    desc: Run golangci-lint linter
    cmds:
      - if ! which -s golangci-lint; then brew install golangci-lint; fi
      - golangci-lint run ./...

  govulncheck:
    desc: Run govulncheck
    cmds:
      - if ! which -s govulncheck; then go install golang.org/x/vuln/cmd/govulncheck@latest; fi
      - govulncheck ./...

  lint:
    desc: Run all checkers and linters
    cmds:
      - task: vet
      - task: staticcheck
      - task: golangci-lint
      - task: govulncheck

  test:unit:
    desc: Run unit tests
    vars:
      GOTEST:
        sh: which gotest || echo go test
    cmds:
      - '{{.GOTEST}} -v -mod=vendor -race -failfast {{default "./..." .CLI_ARGS}}'

  test:func:
    desc: Run functional tests
    vars:
      GOTEST:
        sh: which gotest || echo go test
    cmds:
      - if [ -z "{{.APP_NAME}}" ]; then echo "APP_NAME var is not set"; exit 1; fi
      - if [ -f docker-compose.tests.yaml ]; then docker compose -p {{.APP_NAME}}_tests -f docker-compose.tests.yaml up --remove-orphans -d; fi
      - if [ -f docker-compose.tests.yaml ]; then docker compose -p {{.APP_NAME}}_tests -f docker-compose.tests.yaml run --rm --remove-orphans tests go test -v -mod=vendor -tags=functest ./tests/...; fi

  test:func:manual:
    desc: Attach to functional tests container
    cmds:
      - if [ -z "{{.APP_NAME}}" ]; then echo "APP_NAME var is not set"; exit 1; fi
      - if [ -f docker-compose.tests.yaml ]; then docker compose -p {{.APP_NAME}}_tests -f docker-compose.tests.yaml up --remove-orphans -d; fi
      - if [ -f docker-compose.tests.yaml ]; then docker compose -p {{.APP_NAME}}_tests -f docker-compose.tests.yaml run --rm -i tests sh; fi

  test:func:clean:
    desc: Cleanup test environment
    cmds:
      - if [ -z "{{.APP_NAME}}" ]; then echo "APP_NAME var is not set"; exit 1; fi
      - if [ -f docker-compose.tests.yaml ]; then docker compose -p {{.APP_NAME}}_tests -f docker-compose.tests.yaml down --remove-orphans; fi
      - if [ -f docker-compose.tests.yaml ]; then docker compose -p {{.APP_NAME}}_tests -f docker-compose.tests.yaml down -v; fi
